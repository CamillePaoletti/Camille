function [MSDr,D,MSDm,mMSD,nMSD,sMSD,x,y,FIT,m,s,nb,MSDarea]=plotMSDposter(foci,pixel)
%Camille Paoletti - 02/2013
%analyse MSD for trajectories in 'foci' generated by foci=computeMSDbatch()

global segmentation

%pixel=0.0830266;(manip 121130 for ex.)
%pixel=0.1661

n1=size(foci,1);%number of cell
n2=size(foci,2);%number max of foci per cell

%limit=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0];
limit=[0,0.15,0.35,0.55,0.75,1,1,1.0,3.0,3.0,3.0];%interval limits for aggregates radius

%numbers of the cell and of the aggregate of the wanted radius (bin i/10)
%in this cell
MSDr=cell(10,2);

Colors={'k-','b-','c-','g-','r-','r-','r-','r-','r','r','r','r'};
Colors2={'k+','b+','c+','g+','r+','r+','r+','r+','r','r','r','r'};

cc=0;
for i=1:n1%cells
    for j=1:n2%foci
        if isempty(foci{i,j})
        else
            cc=cc+1;
            a(cc)=foci{i,j}.area;
            r=sqrt(a(cc)/pi)*pixel;
            if r>limit(1) && r<=limit(2)
                MSDr{1,1}=[MSDr{1,1},i];
                MSDr{1,2}=[MSDr{1,2},j];
            elseif r>limit(2) && r<=limit(3)
                MSDr{2,1}=[MSDr{2,1},i];
                MSDr{2,2}=[MSDr{2,2},j];
            elseif r>limit(3) && r<=limit(4)
                MSDr{3,1}=[MSDr{3,1},i];
                MSDr{3,2}=[MSDr{3,2},j];
            elseif r>limit(4) && r<=limit(5)
                MSDr{4,1}=[MSDr{4,1},i];
                MSDr{4,2}=[MSDr{4,2},j];
            elseif r>limit(5) && r<=limit(6)
                MSDr{5,1}=[MSDr{5,1},i];
                MSDr{5,2}=[MSDr{5,2},j];
            elseif r>limit(6) && r<=limit(7)
                MSDr{6,1}=[MSDr{6,1},i];
                MSDr{6,2}=[MSDr{6,2},j];
            elseif r>limit(7) && r<=limit(8)
                MSDr{7,1}=[MSDr{7,1},i];
                MSDr{7,2}=[MSDr{7,2},j];
            elseif r>limit(8) && r<=limit(9)
                MSDr{8,1}=[MSDr{8,1},i];
                MSDr{8,2}=[MSDr{8,2},j];
            elseif r>limit(9) && r<=limit(10)
                MSDr{9,1}=[MSDr{9,1},i];
                MSDr{9,2}=[MSDr{9,2},j];
            elseif r>limit(10) && r<=limit(11)
                MSDr{10,1}=[MSDr{10,1},i];
                MSDr{10,2}=[MSDr{10,2},j];
            end
            
            %plot(foci{i,j}.MSD(:,1),Colors{c});
            %errorbar(foci{i,j}.MSD(:,1),foci{i,j}.err(1:length(foci{i,j}.MSD(:,1)),1),Colors{c});
        end
    end
end

D=cell(10,1);
MSDm=cell(10,40);%MSDs of bin i/10 for time points i/40
MSDarea=cell(10,1);
figure;
cc=0;
n=2
nplot=4
disp(['Number of point for determining dif coeff D = ',num2str(n)]);
deltaT=15
for i=1:nplot
    cc=cc+1;
    %subplot(2,4,cc);
    %figure;
    hold on;
    for k=1:length(MSDr{i,1})
        MSDarea{i}=[MSDarea{i},foci{MSDr{i,1}(k),MSDr{i,2}(k)}.area.*pixel.*pixel];%MSD of bin i/9 for time points l/40
        for l=1:length(foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(:,1))
            MSDm{i,l}=[MSDm{i,l},foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(l,1).*pixel.*pixel];%MSD of bin i/9 for time points l/40
        end
        y=foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(:,1).*pixel.*pixel;%foci (i,k)
        if length(y)>=n
            D{i,1}=[D{i,1},y(n,1)/(deltaT*4)];%approximative diffusion coefficient (second point / deltaT)
        end
        plot([0:deltaT:deltaT*(length(y)-1)],y,Colors{i});
    end
    %title(['MSD for radius ',num2str((limit(i)+limit(i+1))/2),'µm']);
    title(['single MSDs']);
    xlabel('time (s)');
    ylabel('MSD (µm^2)');
    %xlim([0 40]);
    %ylim([0 1]);
    xlim([0 600]);
    ylim([0 5]);
    legend(['R<',num2str(limit(2)),'µm'],[num2str(limit(2)),'µm<R<',num2str(limit(3)),'µm'],[num2str(limit(3)),'µm<R<',num2str(limit(4)),'µm'],[num2str(limit(4)),'µm<R<',num2str(limit(5)),'µm']);%,[num2str(limit(5)),'µm<R']);
    hold off;
end

%mean "diffusion coefficient"
m=zeros(1,10);
%standard deviation of the mean "diffusion coefficient"
s=zeros(1,10);
%number of points for the mean
nb=zeros(1,10);
%mean MSD (mean over all the aggregates)
mMSD=zeros(10,35);
%number of aggregates considered for the mean
nMSD=zeros(10,35);
%standard deviation of the mean MSD
sMSD=zeros(10,35);
for i=1:10
    m(i)=mean(D{i,1});
    s(i)=std(D{i,1});%/sqrt(length(D{i,1}));
    nb(i)=length(D{i,1});
    for k=1:35
        mMSD(i,k)=mean(MSDm{i,k});
        nMSD(i,k)=length(MSDm{i,k});
        sMSD(i,k)=std(MSDm{i,k});%/sqrt(length(MSDm{i,k}));
    end
end

findm=find(isfinite(m));
findm=length(findm);
plotm=[1:findm];

clear x; clear y;
x=(limit(1:findm)+limit(2:findm+1))/2;
y=m(plotm);
ylog=log10(y);
deltay=s(plotm);%./sqrt(nb(plotm));
deltaylog=deltay./(log(10).*y);

figure;
errorbar(x,y,s(plotm)./sqrt(nb(plotm)),'b+');
title('mean diffusion coefficient in function of aggregate radius');
xlabel('aggregate radius (µm)');
ylabel('mean diffusion coefficient (µm^2/sec)');


figure;
%plot(log10((limit(1:end-1)+limit(2:end))/2),log10(m));
loglog(x,y,'b+','LineWidth',2);
hold on;
y+deltay
y
y-deltay
log10(y+deltay)
log10(y)
log10(abs(y-deltay))

loglog(x,y+deltay,'b+','LineWidth',1);
loglog(x,abs(y-deltay),'b+','LineWidth',1)
title('Mean diffusion coefficient in function of aggregate radius');
xlabel('log10 of aggregate radius (µm)');
ylabel('log10 of mean diffusion coefficient (µm^2/sec)');
[p] = polyfit(log10(x),log10(y),1)
f = polyval(p,log10(x));
yf= 10.^f;
loglog(x,yf,'b-');
xlim([0.05 1]);
ylim([10^-4 10^-2]);
hold off;

figure;
errorbar(log(x)/log(10),log(y)/log(10),s(plotm)./y./log(10),'b+');
hold on;
title('Mean diffusion coefficient in function of aggregate radius');
xlabel('log of aggregate radius (µm)');
ylabel('log of mean diffusion coefficient (µm^2/sec)');
% [p] = polyfit(log(x),log(y),1)
% f = polyval(p,log(x));
% plot(log(x),f,'b-');
% hold off;




N=nplot
alpha=zeros(1,N);
beta=zeros(1,N);
figure;
hold on;
for i=1:N
    y=mMSD(i,:);
    dy=sMSD(i,:)./sqrt(nMSD(i,:));
    errorbar([0:deltaT:deltaT*(length(y)-1)],y,dy,Colors{i});
    %plot([0:deltaT:deltaT*(length(y)-1)],y,Colors{i})
end
title('Mean MSD in function of aggregate radius');
xlabel('Time (s)');
ylabel('MSD (µm^2)');
%legend('0.15µm','0.25µm','0.35µm','0.45µm','0.55µm','0.65µm','0.75µm','0.85µm');
legend(['R<',num2str(limit(2)),'µm'],[num2str(limit(2)),'µm<R<',num2str(limit(3)),'µm'],[num2str(limit(3)),'µm<R<',num2str(limit(4)),'µm'],[num2str(limit(4)),'µm<R<',num2str(limit(5)),'µm'],[num2str(limit(5)),'µm<R']);
xlim([0 40]);%200
ylim([0 0.5]);%1.2
hold off;



% 
figure;
hold on;
for i=1:N
    y=mMSD(i,:);
    dy=sMSD(i,:)./sqrt(nMSD(i,:));
    x=[0:deltaT:deltaT*(length(y)-1)];
    errorbar(log(x),log(y),dy./y,Colors2{i});   
end
title('Mean MSD in function of aggregate radius - log/log');
xlabel('log(time)');
ylabel('log(MSD)');
legend(['R<',num2str(limit(2)),'µm'],[num2str(limit(2)),'µm<R<',num2str(limit(3)),'µm'],[num2str(limit(3)),'µm<R<',num2str(limit(4)),'µm'],[num2str(limit(4)),'µm<R<',num2str(limit(5)),'µm'],[num2str(limit(5)),'µm<R']);
for i=1:N
    y=mMSD(i,:);
    x=[0:15:15*(length(y)-1)];
    [p] = polyfit(log(x(2:14)),log(y(2:14)),1);
    alpha(i)=p(1);
    beta(i)=p(2);
    f = polyval(p,log(x(2:end)));
    plot(log(x(2:end)),f,Colors{i});
end
hold off;

figure;
hold on;
for i=1:N
    y=mMSD(i,:);
    dy=sMSD(i,:)./sqrt(nMSD(i,:));
    x=[0:deltaT:deltaT*(length(y)-1)];
    loglog(x,y,Colors2{i});,);
    loglog()
end
title('Mean MSD in function of aggregate radius - log/log');
xlabel('log(time)');
ylabel('log(MSD)');
legend(['R<',num2str(limit(2)),'µm'],[num2str(limit(2)),'µm<R<',num2str(limit(3)),'µm'],[num2str(limit(3)),'µm<R<',num2str(limit(4)),'µm'],[num2str(limit(4)),'µm<R<',num2str(limit(5)),'µm'],[num2str(limit(5)),'µm<R']);
for i=1:N
    y=mMSD(i,:);
    x=[0:15:15*(length(y)-1)];
    [p] = polyfit(log(x(2:14)),log(y(2:14)),1);
    alpha(i)=p(1);
    beta(i)=p(2);
    f = polyval(p,log(x(2:end)));
    plot(log(x(2:end)),f,Colors{i});
end
hold off;
% 
% figure;
% x=(limit(1:5)+limit(2:6))/2;
% y=exp(beta(1:5))/4;
% plot(log(x),log(y),'b+');
% hold on;
% title('mean diffusion coefficient in function of aggregate radius');
% xlabel('log of aggregate radius (µm)');
% ylabel('log of mean diffusion coefficient µm^2/sec');
% [p] = polyfit(log(x),log(y),1)
% f = polyval(p,log(x));
% plot(log(x),f,'b-');
% hold off;
% 
% 
% 
% %%%%%%%%%%%%
% 
% 
% %%%%%%%%%%%



end






