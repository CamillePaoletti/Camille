function [MSDr,D,MSDm,mMSD,alpha,beta]=analyseMSD(foci)
%Camille Paoletti - 02/2013
%analyse MSD for trajectories in 'foci' generated by foci=computeMSDbatch()

global segmentation

pixel=0.0830266;

n1=size(foci,1);%number of cell
n2=size(foci,2);%number max of foic per cell

limit=[0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0];
MSDr=cell(10,2);
Colors={'k-','k-','b-','c-','g-','y-','m-','r-','r-','r-','r-','r','r','r','r'};
Colors2={'k+','k+','b+','c+','g+','y+','m+','r+','r+','r+','r+','r','r','r','r'};

cc=0;
for i=1:n1
    for j=1:n2
        if isempty(foci{i,j})
        else
            cc=cc+1;
            a(cc)=foci{i,j}.area;
            r=sqrt(a(cc)/pi)*pixel;
            if r>limit(1) && r<=limit(2)
                MSDr{1,1}=[MSDr{1,1},i];
                MSDr{1,2}=[MSDr{1,2},j];
            elseif r>limit(2) && r<=limit(3)
                MSDr{2,1}=[MSDr{2,1},i];
                MSDr{2,2}=[MSDr{2,2},j];
            elseif r>limit(3) && r<=limit(4)
                MSDr{3,1}=[MSDr{3,1},i];
                MSDr{3,2}=[MSDr{3,2},j];
            elseif r>limit(4) && r<=limit(5)
                MSDr{4,1}=[MSDr{4,1},i];
                MSDr{4,2}=[MSDr{4,2},j];
            elseif r>limit(5) && r<=limit(6)
                MSDr{5,1}=[MSDr{5,1},i];
                MSDr{5,2}=[MSDr{5,2},j];
            elseif r>limit(6) && r<=limit(7)
                MSDr{6,1}=[MSDr{6,1},i];
                MSDr{6,2}=[MSDr{6,2},j];
            elseif r>limit(7) && r<=limit(8)
                MSDr{7,1}=[MSDr{7,1},i];
                MSDr{7,2}=[MSDr{7,2},j];
            elseif r>limit(8) && r<=limit(9)
                MSDr{8,1}=[MSDr{8,1},i];
                MSDr{8,2}=[MSDr{8,2},j];
            elseif r>limit(9) && r<=limit(10)
                MSDr{9,1}=[MSDr{9,1},i];
                MSDr{9,2}=[MSDr{9,2},j];
            elseif r>limit(10) && r<=limit(11)
                MSDr{10,1}=[MSDr{10,1},i];
                MSDr{10,2}=[MSDr{10,2},j];
            end
            
            %plot(foci{i,j}.MSD(:,1),Colors{c});
            %errorbar(foci{i,j}.MSD(:,1),foci{i,j}.err(1:length(foci{i,j}.MSD(:,1)),1),Colors{c});
        end
    end
end

r=sqrt(a./pi).*pixel;

D=cell(10,1);
MSDm=cell(10,40);%MSD of bin i/10 for time points i/40
figure;
cc=0;
n=2
for i=2:9
    cc=cc+1;
    subplot(2,4,cc);
    %figure;
    hold on;
    for k=1:length(MSDr{i,1})
        for l=1:length(foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(:,1))
            MSDm{i,l}=[MSDm{i,l},foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(l,1).*pixel.*pixel];
        end
        y=foci{MSDr{i,1}(k),MSDr{i,2}(k)}.MSD(:,1).*pixel.*pixel
        if length(y)>=n
            D{i,1}=[D{i,1},y(n,1)];
        end
        plot([0:15:15*(length(y)-1)],y);%,Colors{i});
    end
    title(['MSD for radius ',num2str((limit(i)+limit(i+1))/2),'µm']);
    xlabel('time (s)');
    ylabel('MSD (µm^2)');
    %xlim([0 40]);
    %ylim([0 1]);
    xlim([0 600]);
    ylim([0 5]);
    hold off;
end

m=zeros(1,10);
s=zeros(1,10);
mMSD=zeros(10,35);
for i=1:10
    m(i)=mean(D{i,1}/4);
    s(i)=std(D{i,1}/4)/sqrt(length(D{i,1}));
    for k=1:35
        mMSD(i,k)=mean(MSDm{i,k});
    end
end

figure;
errorbar((limit(1:end-1)+limit(2:end))/2,m,s);
title('mean diffusion coefficient in function of aggregate radius');
xlabel('aggregate radius (µm)');
ylabel('mean diffusion coefficient µm^2/sec');

figure;
plot(log((limit(1:end-1)+limit(2:end))/2),log(m));
title('mean diffusion coefficient in function of aggregate radius');
xlabel('log of aggregate radius (µm)');
ylabel('log of mean diffusion coefficient µm^2/sec');


figure;
hold on;
for i=2:9
    y=mMSD(i,:);
    plot([0:15:15*(length(y)-1)],y,Colors{i});
end
title('Mean MSD in function of aggregate radius');
xlabel('time');
ylabel('MSD (µm^2)');
legend('0.15µm','0.25µm','0.35µm','0.45µm','0.55µm','0.65µm','0.75µm','0.85µm');
hold off;

figure;
hold on;
for i=2:9
    y=mMSD(i,:);
    x=[0:15:15*(length(y)-1)];
    plot(log(x),log(y),Colors2{i});
    
end
title('Mean MSD in function of aggregate radius - log/log');
xlabel('log(time)');
ylabel('log(MSD)');
legend('0.15µm','0.25µm','0.35µm','0.45µm','0.55µm','0.65µm','0.75µm','0.85µm');
for i=2:9
    y=mMSD(i,:);
    x=[0:15:15*(length(y)-1)];
    [p] = polyfit(log(x(2:end)),log(y(2:end)),1);
    alpha(i)=p(1);
    beta(i)=p(2);
    f = polyval(p,log(x(2:end)));
    plot(log(x(2:end)),f,Colors{i});
end
hold off;

end
